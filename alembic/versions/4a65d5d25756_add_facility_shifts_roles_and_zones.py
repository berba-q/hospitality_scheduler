"""add facility shifts roles and zones

Revision ID: 4a65d5d25756
Revises: 4cc4d61b34b8
Create Date: 2025-07-17 08:02:39.242654

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '4a65d5d25756'
down_revision: Union[str, Sequence[str], None] = '4cc4d61b34b8'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create new tables first
    op.create_table('facilityrole',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('facility_id', sa.Uuid(), nullable=False),
    sa.Column('role_name', sa.String(), nullable=False),
    sa.Column('min_skill_level', sa.Integer(), nullable=False),
    sa.Column('max_skill_level', sa.Integer(), nullable=False),
    sa.Column('is_management', sa.Boolean(), nullable=False),
    sa.Column('hourly_rate_min', sa.Float(), nullable=True),
    sa.Column('hourly_rate_max', sa.Float(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['facility_id'], ['facility.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    
    op.create_table('facilityshift',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('facility_id', sa.Uuid(), nullable=False),
    sa.Column('shift_name', sa.String(), nullable=False),
    sa.Column('start_time', sa.String(), nullable=False),
    sa.Column('end_time', sa.String(), nullable=False),
    sa.Column('requires_manager', sa.Boolean(), nullable=False),
    sa.Column('min_staff', sa.Integer(), nullable=False),
    sa.Column('max_staff', sa.Integer(), nullable=False),
    sa.Column('shift_order', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('color', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['facility_id'], ['facility.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    
    op.create_table('facilityzone',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('facility_id', sa.Uuid(), nullable=False),
    sa.Column('zone_id', sa.String(), nullable=False),
    sa.Column('zone_name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('required_roles', sa.JSON(), nullable=True),
    sa.Column('preferred_roles', sa.JSON(), nullable=True),
    sa.Column('min_staff_per_shift', sa.Integer(), nullable=False),
    sa.Column('max_staff_per_shift', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('display_order', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['facility_id'], ['facility.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    
    op.create_table('shiftrolerequirement',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('facility_shift_id', sa.Uuid(), nullable=False),
    sa.Column('facility_role_id', sa.Uuid(), nullable=False),
    sa.Column('min_required', sa.Integer(), nullable=False),
    sa.Column('max_allowed', sa.Integer(), nullable=True),
    sa.Column('is_required', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['facility_role_id'], ['facilityrole.id'], ),
    sa.ForeignKeyConstraint(['facility_shift_id'], ['facilityshift.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    
    # Add nullable columns first for existing facility table
    op.add_column('facility', sa.Column('facility_type', sa.String(), nullable=True))
    op.add_column('facility', sa.Column('address', sa.String(), nullable=True))
    op.add_column('facility', sa.Column('phone', sa.String(), nullable=True))
    op.add_column('facility', sa.Column('email', sa.String(), nullable=True))
    op.add_column('facility', sa.Column('description', sa.String(), nullable=True))
    op.add_column('facility', sa.Column('settings', sa.JSON(), nullable=True))
    
    # Add created_at as nullable first
    op.add_column('facility', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('facility', sa.Column('updated_at', sa.DateTime(), nullable=True))
    
    # Update existing records with default values
    op.execute("UPDATE facility SET created_at = NOW() WHERE created_at IS NULL")
    op.execute("UPDATE facility SET facility_type = 'hotel' WHERE facility_type IS NULL")
    
    # Now make created_at NOT NULL
    op.alter_column('facility', 'created_at', nullable=False)
    
    # Populate default shifts, roles, and zones for existing facilities
    populate_default_facility_data()
    
    # ### end Alembic commands ###


def populate_default_facility_data():
    """Populate default shifts, roles, and zones for existing facilities"""
    from sqlalchemy import text
    
    # Get database connection
    connection = op.get_bind()
    
    # Get all existing facilities
    result = connection.execute(text("SELECT id, facility_type FROM facility"))
    facilities = result.fetchall()
    
    # Default configurations
    FACILITY_CONFIGS = {
        'hotel': {
            'shifts': [
                {'name': 'Day Shift', 'start': '06:00', 'end': '14:00', 'manager': False, 'min': 3, 'max': 8, 'order': 0, 'color': 'blue'},
                {'name': 'Evening Shift', 'start': '14:00', 'end': '22:00', 'manager': True, 'min': 4, 'max': 10, 'order': 1, 'color': 'orange'},
                {'name': 'Night Shift', 'start': '22:00', 'end': '06:00', 'manager': True, 'min': 2, 'max': 5, 'order': 2, 'color': 'purple'}
            ],
            'roles': [
                {'name': 'Manager', 'skill_min': 4, 'skill_max': 5, 'is_mgmt': True},
                {'name': 'Assistant Manager', 'skill_min': 3, 'skill_max': 4, 'is_mgmt': True},
                {'name': 'Front Desk Agent', 'skill_min': 2, 'skill_max': 4, 'is_mgmt': False},
                {'name': 'Housekeeper', 'skill_min': 1, 'skill_max': 3, 'is_mgmt': False},
                {'name': 'Security', 'skill_min': 2, 'skill_max': 4, 'is_mgmt': False}
            ],
            'zones': [
                {'id': 'front-desk', 'name': 'Front Desk', 'roles': '["Manager", "Front Desk Agent"]', 'min': 1, 'max': 3},
                {'id': 'housekeeping', 'name': 'Housekeeping', 'roles': '["Housekeeper"]', 'min': 2, 'max': 6},
                {'id': 'security', 'name': 'Security', 'roles': '["Security"]', 'min': 1, 'max': 2}
            ]
        },
        'restaurant': {
            'shifts': [
                {'name': 'Breakfast', 'start': '07:00', 'end': '11:00', 'manager': False, 'min': 2, 'max': 5, 'order': 0, 'color': 'yellow'},
                {'name': 'Lunch', 'start': '11:00', 'end': '16:00', 'manager': True, 'min': 4, 'max': 8, 'order': 1, 'color': 'green'},
                {'name': 'Dinner', 'start': '16:00', 'end': '23:00', 'manager': True, 'min': 5, 'max': 12, 'order': 2, 'color': 'red'}
            ],
            'roles': [
                {'name': 'Manager', 'skill_min': 4, 'skill_max': 5, 'is_mgmt': True},
                {'name': 'Chef', 'skill_min': 4, 'skill_max': 5, 'is_mgmt': False},
                {'name': 'Waiter', 'skill_min': 2, 'skill_max': 4, 'is_mgmt': False},
                {'name': 'Bartender', 'skill_min': 3, 'skill_max': 4, 'is_mgmt': False}
            ],
            'zones': [
                {'id': 'kitchen', 'name': 'Kitchen', 'roles': '["Chef"]', 'min': 2, 'max': 6},
                {'id': 'dining', 'name': 'Dining Room', 'roles': '["Waiter"]', 'min': 3, 'max': 8},
                {'id': 'bar', 'name': 'Bar', 'roles': '["Bartender"]', 'min': 1, 'max': 3}
            ]
        }
    }
    
    for facility in facilities:
        facility_id = facility[0]
        facility_type = facility[1] or 'hotel'
        
        print(f"Setting up default data for facility: {facility_id} (type: {facility_type})")
        
        # Get configuration for this facility type
        config = FACILITY_CONFIGS.get(facility_type, FACILITY_CONFIGS['hotel'])
        
        # Insert default shifts
        for shift_data in config['shifts']:
            connection.execute(text("""
                INSERT INTO facilityshift (id, facility_id, shift_name, start_time, end_time, 
                                         requires_manager, min_staff, max_staff, shift_order, color, 
                                         is_active, created_at)
                VALUES (gen_random_uuid(), :facility_id, :name, :start_time, :end_time, 
                        :requires_manager, :min_staff, :max_staff, :shift_order, :color,
                        true, NOW())
            """), {
                'facility_id': facility_id,
                'name': shift_data['name'],
                'start_time': shift_data['start'],
                'end_time': shift_data['end'],
                'requires_manager': shift_data['manager'],
                'min_staff': shift_data['min'],
                'max_staff': shift_data['max'],
                'shift_order': shift_data['order'],
                'color': shift_data['color']
            })
        
        # Insert default roles
        for role_data in config['roles']:
            connection.execute(text("""
                INSERT INTO facilityrole (id, facility_id, role_name, min_skill_level, 
                                        max_skill_level, is_management, is_active, created_at)
                VALUES (gen_random_uuid(), :facility_id, :role_name, :min_skill, :max_skill, 
                        :is_mgmt, true, NOW())
            """), {
                'facility_id': facility_id,
                'role_name': role_data['name'],
                'min_skill': role_data['skill_min'],
                'max_skill': role_data['skill_max'],
                'is_mgmt': role_data['is_mgmt']
            })
        
        # Insert default zones
        for zone_data in config['zones']:
            connection.execute(text("""
                INSERT INTO facilityzone (id, facility_id, zone_id, zone_name, required_roles,
                                        min_staff_per_shift, max_staff_per_shift, display_order,
                                        is_active, created_at)
                VALUES (gen_random_uuid(), :facility_id, :zone_id, :zone_name, :required_roles,
                        :min_staff, :max_staff, :display_order, true, NOW())
            """), {
                'facility_id': facility_id,
                'zone_id': zone_data['id'],
                'zone_name': zone_data['name'],
                'required_roles': zone_data['roles'],
                'min_staff': zone_data['min'],
                'max_staff': zone_data['max'],
                'display_order': 0
            })
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('facility', 'updated_at')
    op.drop_column('facility', 'created_at')
    op.drop_column('facility', 'settings')
    op.drop_column('facility', 'description')
    op.drop_column('facility', 'email')
    op.drop_column('facility', 'phone')
    op.drop_column('facility', 'address')
    op.drop_column('facility', 'facility_type')
    op.drop_table('shiftrolerequirement')
    op.drop_table('facilityzone')
    op.drop_table('facilityshift')
    op.drop_table('facilityrole')
    # ### end Alembic commands ###
