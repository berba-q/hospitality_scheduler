"""enhance swap workflow final

Revision ID: 68d13a4ad083
Revises: d70398aa6092
Create Date: 2025-07-21 00:56:34.982283

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '68d13a4ad083'
down_revision: Union[str, Sequence[str], None] = 'd70398aa6092'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    from sqlalchemy.dialects.postgresql import ENUM
    
    op.execute(
        """
        DO $$
        BEGIN
            IF NOT EXISTS (
                SELECT 1 FROM pg_type WHERE typname = 'swapstatus'
            ) THEN
                CREATE TYPE swapstatus AS ENUM (
                    'PENDING',
                    'POTENTIAL_ASSIGNMENT',
                    'STAFF_ACCEPTED',
                    'MANAGER_FINAL_APPROVAL',
                    'EXECUTED',
                    'STAFF_DECLINED',
                    'ASSIGNMENT_DECLINED',
                    'ASSIGNMENT_FAILED',
                    'DECLINED',
                    'CANCELLED'
                );
            END IF;
        END$$;
        """
    )
    
    op.execute(
    """
    ALTER TABLE swaprequest
      ALTER COLUMN status
      TYPE swapstatus
      USING status::swapstatus;
    """
    )


    swap_status_enum = ENUM(
    'PENDING', 'POTENTIAL_ASSIGNMENT', 'STAFF_ACCEPTED',
    'MANAGER_FINAL_APPROVAL', 'EXECUTED', 'STAFF_DECLINED',
    'ASSIGNMENT_DECLINED', 'ASSIGNMENT_FAILED', 'DECLINED', 'CANCELLED',
    name="swapstatus",
    create_type=False,
    )
    
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("ALTER TABLE swaprequest ADD COLUMN IF NOT EXISTS original_zone_id VARCHAR")
    op.execute("ALTER TABLE swaprequest ADD COLUMN IF NOT EXISTS target_zone_id VARCHAR")
    op.execute("ALTER TABLE swaprequest ADD COLUMN IF NOT EXISTS assigned_staff_accepted BOOLEAN")
    op.execute("ALTER TABLE swaprequest ADD COLUMN IF NOT EXISTS manager_final_approved BOOLEAN")
    op.execute("ALTER TABLE swaprequest ADD COLUMN IF NOT EXISTS requires_manager_final_approval BOOLEAN NOT NULL DEFAULT TRUE")
    op.execute("ALTER TABLE swaprequest ADD COLUMN IF NOT EXISTS role_verification_required BOOLEAN NOT NULL DEFAULT TRUE")
    op.execute("ALTER TABLE swaprequest ADD COLUMN IF NOT EXISTS original_shift_role_id UUID")
    op.execute("ALTER TABLE swaprequest ADD COLUMN IF NOT EXISTS assigned_staff_role_id UUID")
    op.execute("ALTER TABLE swaprequest ADD COLUMN IF NOT EXISTS target_staff_role_id UUID")
    op.execute("ALTER TABLE swaprequest ADD COLUMN IF NOT EXISTS role_match_override BOOLEAN NOT NULL DEFAULT FALSE")
    op.execute("ALTER TABLE swaprequest ADD COLUMN IF NOT EXISTS role_match_reason VARCHAR")
    op.execute("ALTER TABLE swaprequest ADD COLUMN IF NOT EXISTS manager_approved_at TIMESTAMP")
    op.execute("ALTER TABLE swaprequest ADD COLUMN IF NOT EXISTS staff_responded_at TIMESTAMP")
    op.execute("ALTER TABLE swaprequest ADD COLUMN IF NOT EXISTS manager_final_approved_at TIMESTAMP")
    op.alter_column('swaprequest', 'status',
               existing_type=sa.VARCHAR(),
                        type_=swap_status_enum,
               existing_nullable=False)
    op.create_index('idx_unique_active_swap_request', 'swaprequest', ['schedule_id', 'requesting_staff_id', 'original_day', 'original_shift'], unique=True, postgresql_where="status NOT IN ('EXECUTED','DECLINED','CANCELLED','STAFF_DECLINED','ASSIGNMENT_FAILED')")
    op.create_index('idx_unique_auto_assignment', 'swaprequest', ['schedule_id', 'assigned_staff_id', 'original_day', 'original_shift'], unique=True, postgresql_where="swap_type = 'auto' AND assigned_staff_id IS NOT NULL AND status IN ('POTENTIAL_ASSIGNMENT', 'STAFF_ACCEPTED', 'MANAGER_FINAL_APPROVAL')")
    op.create_index('idx_unique_specific_swap', 'swaprequest', ['schedule_id', 'requesting_staff_id', 'target_staff_id', 'original_day', 'original_shift', 'target_day', 'target_shift'], unique=True, postgresql_where="swap_type = 'specific' AND status NOT IN ('EXECUTED','DECLINED','CANCELLED','STAFF_DECLINED')")
    op.create_foreign_key(None, 'swaprequest', 'facilityrole', ['assigned_staff_role_id'], ['id'])
    op.create_foreign_key(None, 'swaprequest', 'facilityrole', ['original_shift_role_id'], ['id'])
    op.create_foreign_key(None, 'swaprequest', 'facilityrole', ['target_staff_role_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'swaprequest', type_='foreignkey')
    op.drop_constraint(None, 'swaprequest', type_='foreignkey')
    op.drop_constraint(None, 'swaprequest', type_='foreignkey')
    op.drop_index('idx_unique_specific_swap', table_name='swaprequest', postgresql_where="swap_type = 'specific' AND status NOT IN ('executed', 'declined', 'cancelled', 'staff_declined')")
    op.drop_index('idx_unique_auto_assignment', table_name='swaprequest', postgresql_where="swap_type = 'auto' AND assigned_staff_id IS NOT NULL AND status IN ('potential_assignment', 'staff_accepted', 'manager_final_approval')")
    op.drop_index('idx_unique_active_swap_request', table_name='swaprequest', postgresql_where="status NOT IN ('executed', 'declined', 'cancelled', 'staff_declined', 'assignment_failed')")
    op.alter_column('swaprequest', 'status',
               existing_type=sa.Enum('PENDING', 'MANAGER_APPROVED', 'POTENTIAL_ASSIGNMENT', 'STAFF_ACCEPTED', 'MANAGER_FINAL_APPROVAL', 'EXECUTED', 'STAFF_DECLINED', 'ASSIGNMENT_DECLINED', 'ASSIGNMENT_FAILED', 'DECLINED', 'CANCELLED', name='swapstatus'),
               type_=sa.VARCHAR(),
               existing_nullable=False)
    op.drop_column('swaprequest', 'manager_final_approved_at')
    op.drop_column('swaprequest', 'staff_responded_at')
    op.drop_column('swaprequest', 'manager_approved_at')
    op.drop_column('swaprequest', 'role_match_reason')
    op.drop_column('swaprequest', 'role_match_override')
    op.drop_column('swaprequest', 'target_staff_role_id')
    op.drop_column('swaprequest', 'assigned_staff_role_id')
    op.drop_column('swaprequest', 'original_shift_role_id')
    op.drop_column('swaprequest', 'role_verification_required')
    op.drop_column('swaprequest', 'requires_manager_final_approval')
    op.drop_column('swaprequest', 'manager_final_approved')
    op.drop_column('swaprequest', 'assigned_staff_accepted')
    op.drop_column('swaprequest', 'target_zone_id')
    op.drop_column('swaprequest', 'original_zone_id')
    op.execute("DROP TYPE IF EXISTS swapstatus")
    # ### end Alembic commands ###
