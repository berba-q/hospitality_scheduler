"""add security models

Revision ID: 50795cc19e4e
Revises: efb809c0a040
Create Date: 2025-08-21 07:34:58.517628

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '50795cc19e4e'
down_revision: Union[str, Sequence[str], None] = 'efb809c0a040'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('accountlockout',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('locked_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('locked_until', sa.DateTime(timezone=True), nullable=True),
    sa.Column('failed_attempts', sa.Integer(), nullable=False),
    sa.Column('lockout_reason', sa.String(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_accountlockout_email'), 'accountlockout', ['email'], unique=True)
    op.create_table('loginattempt',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('ip_address', sa.String(), nullable=False),
    sa.Column('user_agent', sa.String(), nullable=True),
    sa.Column('success', sa.Boolean(), nullable=False),
    sa.Column('failure_reason', sa.String(), nullable=True),
    sa.Column('attempted_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_email_attempted_at', 'loginattempt', ['email', 'attempted_at'], unique=False)
    op.create_index('idx_ip_attempted_at', 'loginattempt', ['ip_address', 'attempted_at'], unique=False)
    op.create_index(op.f('ix_loginattempt_attempted_at'), 'loginattempt', ['attempted_at'], unique=False)
    op.create_index(op.f('ix_loginattempt_email'), 'loginattempt', ['email'], unique=False)
    op.create_index(op.f('ix_loginattempt_ip_address'), 'loginattempt', ['ip_address'], unique=False)
    op.create_table('passwordhistory',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('password_hash', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_passwordhistory_user_created_at', 'passwordhistory', ['user_id', 'created_at'], unique=False)
    op.create_index(op.f('ix_passwordhistory_user_id'), 'passwordhistory', ['user_id'], unique=False)
    op.create_table('securitysettings',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('tenant_id', sa.Uuid(), nullable=False),
    sa.Column('max_failed_attempts', sa.Integer(), nullable=False),
    sa.Column('lockout_duration_minutes', sa.Integer(), nullable=False),
    sa.Column('failed_attempts_window_minutes', sa.Integer(), nullable=False),
    sa.Column('min_password_length', sa.Integer(), nullable=False),
    sa.Column('require_uppercase', sa.Boolean(), nullable=False),
    sa.Column('require_lowercase', sa.Boolean(), nullable=False),
    sa.Column('require_numbers', sa.Boolean(), nullable=False),
    sa.Column('require_special_chars', sa.Boolean(), nullable=False),
    sa.Column('password_history_count', sa.Integer(), nullable=False),
    sa.Column('password_expiry_days', sa.Integer(), nullable=True),
    sa.Column('session_timeout_minutes', sa.Integer(), nullable=False),
    sa.Column('max_concurrent_sessions', sa.Integer(), nullable=False),
    sa.Column('require_2fa', sa.Boolean(), nullable=False),
    sa.Column('login_rate_limit_per_hour', sa.Integer(), nullable=False),
    sa.Column('signup_rate_limit_per_hour', sa.Integer(), nullable=False),
    sa.Column('password_reset_rate_limit_per_hour', sa.Integer(), nullable=False),
    sa.Column('audit_login_attempts', sa.Boolean(), nullable=False),
    sa.Column('audit_data_access', sa.Boolean(), nullable=False),
    sa.Column('audit_retention_days', sa.Integer(), nullable=False),
    sa.Column('ip_whitelist', sa.JSON(), nullable=True),
    sa.Column('force_https', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_by', sa.Uuid(), nullable=True),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenant.id'], ),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_securitysettings_tenant_id'), 'securitysettings', ['tenant_id'], unique=True)
    op.create_table('usersession',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('session_token_hash', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_used', sa.DateTime(timezone=True), nullable=True),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('ip_address', sa.String(), nullable=False),
    sa.Column('user_agent', sa.String(), nullable=True),
    sa.Column('device_fingerprint', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('revoked_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('revoked_by', sa.Uuid(), nullable=True),
    sa.Column('revocation_reason', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['revoked_by'], ['user.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_usersession_expires_at'), 'usersession', ['expires_at'], unique=False)
    op.create_index(op.f('ix_usersession_is_active'), 'usersession', ['is_active'], unique=False)
    op.create_index(op.f('ix_usersession_last_used'), 'usersession', ['last_used'], unique=False)
    op.create_index(op.f('ix_usersession_session_token_hash'), 'usersession', ['session_token_hash'], unique=True)
    op.create_index(op.f('ix_usersession_user_id'), 'usersession', ['user_id'], unique=False)
    op.add_column('auditlog', sa.Column('event_type', sa.String(), nullable=True))
    op.add_column('auditlog', sa.Column('event_description', sa.String(), nullable=True))
    op.add_column('auditlog', sa.Column('severity', sa.String(), nullable=False, server_default='info'))
    op.alter_column('auditlog', 'severity', server_default=None)
    op.add_column('auditlog', sa.Column('request_id', sa.String(), nullable=True))
    op.add_column('auditlog', sa.Column('details', sa.JSON(), nullable=True))
    op.create_index('idx_action_created_at', 'auditlog', ['action', 'created_at'], unique=False)
    op.create_index('idx_event_created_at', 'auditlog', ['event_type', 'created_at'], unique=False)
    op.create_index('idx_severity_created_at', 'auditlog', ['severity', 'created_at'], unique=False)
    op.create_index('idx_tenant_created_at', 'auditlog', ['tenant_id', 'created_at'], unique=False)
    op.create_index('idx_auditlog_user_created_at', 'auditlog', ['user_id', 'created_at'], unique=False)
    op.create_index(op.f('ix_auditlog_created_at'), 'auditlog', ['created_at'], unique=False)
    op.create_index(op.f('ix_auditlog_event_type'), 'auditlog', ['event_type'], unique=False)
    op.create_index(op.f('ix_auditlog_ip_address'), 'auditlog', ['ip_address'], unique=False)
    op.create_index(op.f('ix_auditlog_request_id'), 'auditlog', ['request_id'], unique=False)
    op.create_index(op.f('ix_auditlog_tenant_id'), 'auditlog', ['tenant_id'], unique=False)
    op.create_index(op.f('ix_auditlog_user_id'), 'auditlog', ['user_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_auditlog_user_id'), table_name='auditlog')
    op.drop_index(op.f('ix_auditlog_tenant_id'), table_name='auditlog')
    op.drop_index(op.f('ix_auditlog_request_id'), table_name='auditlog')
    op.drop_index(op.f('ix_auditlog_ip_address'), table_name='auditlog')
    op.drop_index(op.f('ix_auditlog_event_type'), table_name='auditlog')
    op.drop_index(op.f('ix_auditlog_created_at'), table_name='auditlog')
    op.drop_index('idx_auditlog_user_created_at', table_name='auditlog')
    op.drop_index('idx_tenant_created_at', table_name='auditlog')
    op.drop_index('idx_severity_created_at', table_name='auditlog')
    op.drop_index('idx_event_created_at', table_name='auditlog')
    op.drop_index('idx_action_created_at', table_name='auditlog')
    op.drop_column('auditlog', 'details')
    op.drop_column('auditlog', 'request_id')
    op.drop_column('auditlog', 'severity')
    op.drop_column('auditlog', 'event_description')
    op.drop_column('auditlog', 'event_type')
    op.drop_index(op.f('ix_usersession_user_id'), table_name='usersession')
    op.drop_index(op.f('ix_usersession_session_token_hash'), table_name='usersession')
    op.drop_index(op.f('ix_usersession_last_used'), table_name='usersession')
    op.drop_index(op.f('ix_usersession_is_active'), table_name='usersession')
    op.drop_index(op.f('ix_usersession_expires_at'), table_name='usersession')
    op.drop_table('usersession')
    op.drop_index(op.f('ix_securitysettings_tenant_id'), table_name='securitysettings')
    op.drop_table('securitysettings')
    op.drop_index(op.f('ix_passwordhistory_user_id'), table_name='passwordhistory')
    op.drop_index('idx_passwordhistory_user_created_at', table_name='passwordhistory')
    op.drop_table('passwordhistory')
    op.drop_index(op.f('ix_loginattempt_ip_address'), table_name='loginattempt')
    op.drop_index(op.f('ix_loginattempt_email'), table_name='loginattempt')
    op.drop_index(op.f('ix_loginattempt_attempted_at'), table_name='loginattempt')
    op.drop_index('idx_ip_attempted_at', table_name='loginattempt')
    op.drop_index('idx_email_attempted_at', table_name='loginattempt')
    op.drop_table('loginattempt')
    op.drop_index(op.f('ix_accountlockout_email'), table_name='accountlockout')
    op.drop_table('accountlockout')
    # ### end Alembic commands ###
